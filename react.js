//My Context<br/>let React, { StrictMode, useState ,useRef, useEffect, createContext, useContext } = React;<br/> let { createRoot } = ReactDOM;<br/> <br/> const FooterContext = createContext();<br/> const FooterContextProvider = ({ children }) => {<br/>  const [hstate, setHstate] = useState(true);<br/>  const [mstate, setMstate] = useState(false);<br/>  const [sstate, setSstate] = useState(false);<br/>  const [pstate, setPstate] = useState(false);<br/>  const [focuss,setFocuss] = useState(false);<br/>  const [login, setLogin] = useState(true);<br/>  const [username,setUsername] = useState("User");<br/>  const [ResetEmail, setResetEmail] = useState("");<br/>  const [showChangeInfo,setShowChangeInfo] = useState(false);<br/>  const [messages, setMessages] = useState([]);<br/>  const [fetchedData, setFetchedData] = useState([]);<br/>  const [feedbacksCount, setFeedbacksCount] = useState(0);<br/>  const [isLogin, setIslogin] = useState(false);<br/>  const [isAround, setIsaround] = useState(true);<br/>  const All = {<br/>    hstate,<br/>    setHstate,<br/>    mstate,<br/>    setMstate,<br/>    sstate,<br/>    setSstate,<br/>    pstate,<br/>    setPstate,<br/>    focuss,<br/>    setFocuss,<br/>    login,<br/>    setLogin,<br/>    username,<br/>    setUsername,<br/>    isLogin,<br/>    setIslogin,<br/>    isAround,<br/>    setIsaround,<br/>    showChangeInfo,<br/>    setShowChangeInfo,<br/>    messages,<br/>    setMessages,<br/>    fetchedData,<br/>    setFetchedData,<br/>    ResetEmail,<br/>    setResetEmail,<br/>    feedbacksCount,<br/>    setFeedbacksCount<br/>  };<div></div>  return (<br/>    <FooterContext.Provider value={All}><br/>      {children}<br/>    </FooterContext.Provider><br/>  );<br/>};<br/> const Top = () =>{<br/>  return(<br/>    <nav><br/>     <div className="pwg"><br/>      <div className="profile-icon"></div><br/>      <div className="greet"><br/>       NasfliX<br/>      </div><br/>     </div><br/>    </nav><br/>   );<br/> }<br/> <br/> //Movie Card Layout<br/> const LayoutMovieCard = () =>{<br/> <br/> const {<br/>     setHstate,<br/>     setMstate,<br/>     setSstate,<br/>     setPstate<br/> } = useContext(FooterContext);<br/> <br/>  let MoviesCompo = () =>{<br/>     setHstate(false);<br/>     setMstate(true);<br/>     setSstate(false);<br/>     setPstate(false);<br/> }<br/>     return(<br/>       <><br/>          <div className="f-layout-cont"><br/>             <div className="f-layout"><br/>              <div className="l-cont"><br/>                <div className="txt"><br/>                 <div className="t1"><br/>                    CineMagic<br/>                    <br /><br/>                     Watch, Enjoy! <br/>                 </div><br/>                 <div className="t2"><br/>                  Explore Cinematic Wonders: Handpicked New Releases!<br/>                 </div><br/>                </div><br/>                <div className="img"><br/>                 <img <br/>                 src="https://static.vecteezy.com/system/resources/previews/024/830/900/original/3d-illustration-icon-of-blue-film-and-movie-camera-png.png" <br/>                 loading="lazy"<br/>                 alt="Illustrateion"/><br/>                </div><br/>              </div><br/>              <div className="btn-cont"><br/>                <button<br/>                onClick={MoviesCompo}<br/>                >Watch Now <i className="fa fa-video-camera"></i> </button><br/>              </div><br/>              </div><br/>           </div><br/>        </><br/>     );<br/> }<br/> <br/> //Passed Date<br/> const TimeAgo = (timepass) =>{<br/>     let date = new Date();<br/>     let passDate = new Date(timepass);<br/>     let AllDate = date - passDate;<br/>     let seconds = Math.floor(AllDate/1000);<br/>     if(seconds>=31536000){<br/>        let years = Math.floor(seconds/31536000);<br/>        return `${years} year${(years===1)?"":"s"} ago`;<br/>     }else if(seconds>=2592000){<br/>         let months = Math.floor(seconds/2592000);<br/>         return `${months} month${(months===1)?"":"s"} ago`;<br/>     }else if(seconds>=86400){<br/>         let days = Math.floor(seconds/86400);<br/>         return `${days} day${(days===1)?"":"s"} ago`;<br/>     }else if(seconds>=3600){<br/>         let hours = Math.floor(seconds/3600);<br/>         return `${hours} hour${(hours===1)?"":"s"} ago`;<br/>     }else if(seconds>=60){<br/>         let minutes = Math.floor(seconds/60);<br/>         return `${minutes} minute${(minutes===1)?"":"s"} ago`;<br/>     }else if(seconds<60){<br/>         let secs = seconds;<br/>         return `just now`;<br/>     }<br/> }<br/> <br/> <br/> //Movies Data<br/> const movies = [<br/>  {<br/>    name:"Spider-Man: No Way Home",<br/>    duration:"2h 28m",<br/>    views:"98M views",<br/>    time:TimeAgo("2021-12-17"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQg3lpk9cAwFxVCTWm1JcQ-_6r0Xyik7Cdhfg&usqp=CAU",<br/>    alt:"Spider-Man: No Way Home",<br/>   watch:"https://youtube.com/embed/JfVOs4VSpmA?si=rLIULx8XGmFN_7OW",<br/>   likes:"122K"<br/>  },<br/>  {<br/>    name:"Avengers: Endgame",<br/>    duration:"3h 1m",<br/>    views:"3B views",<br/>    time:TimeAgo("2019-04-25"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_PEwUzkNjHh1b_c6_23wB6UmtNQYLLWtFcA&usqp=CAU",<br/>    alt:"Avengers: Endgame",<br/>    watch:"https://youtube.com/embed/BKviRM0KF2A?si=UAs2rcS_hdZPGArC",<br/>    likes:"222K"<br/>  },<br/>  {<br/>    name:"The Lion King",<br/>    duration:"1h 59m",<br/>    views:"369M views",<br/>    time:TimeAgo("2019-07-19"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSOoRl5Omu1G-i00qiO-GJmkOHwNFLfw6p7ZA&usqp=CAU",<br/>    alt:"The Lion King",<br/>    watch:"https://youtube.com/embed/7TavVZMewpY?feature=shared",<br/>    likes:"272K"<br/>  },<br/>  {<br/>    name:"Black Panther: Wakanda Forever",<br/>    duration:"2h 41m",<br/>    views:"169M views",<br/>    time:TimeAgo("2022-11-11"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTVi3qVmrn1mM18VVgDnF_3ONjd9dK9GZ4kgA&usqp=CAU",<br/>    alt:"Black Panther: Wakanda Forever",<br/>    watch:"https://youtube.com/embed/RlOB3UALvrQ?si=YoO5Nml8zOt3StSD",<br/>    likes:"483K"<br/>  },<br/>  {<br/>    name:"Thor: Love and Thunder",<br/>    duration:"1h 59m",<br/>    views:"871M views",<br/>    time:TimeAgo("2022-07-08"), src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRUOji9eGwnXqmUUPmicwLc-_fXGaAUZwfsXA&usqp=CAU",<br/>    alt:"Thor: Love and Thunder",<br/>    watch:"https://youtube.com/embed/tgB1wUcmbbw?si=uik3d-3gdeoPmcZJ",<br/>    likes:"382K"<br/>  },<br/>  {<br/>    name:"The Conjuring: The Devil Made Me Do It",<br/>    duration:"1h 52m",<br/>    views:"329M views",<br/>    time:TimeAgo("2021-06-04"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTybqGWZ6I1NYro2t-t79krhopWS26byweXeA&usqp=CAU",<br/>    alt:"The Conjuring: The Devil Made Me Do It",<br/>    watch:"https://youtube.com/embed/h9Q4zZS2v1k?si=GUlaDmHWzsqMjxVg",<br/>    likes:"342K"<br/>  },<br/>  {<br/>    name:"Jurassic World Dominion",<br/>    duration:"2h 27m",<br/>    views:"762M views",<br/>    time:TimeAgo("2022-06-10"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRvL0qfZYhXl5CPG7T0CkjTmqYDF8-xixOXeA&usqp=CAU",<br/>    alt:"Jurassic World Dominion",<br/>    watch:"https://youtube.com/embed/fb5ELWi-ekk?si=x1zKidTIDDqGtBh7",<br/>    likes:"394K"<br/>  },<br/>  {<br/>    name:"Sonic the Hedgehog 2",<br/>    duration:"2h 2m",<br/>    views:"369M views",<br/>    time:TimeAgo("2022-04-08"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSiOE32XTIKq2Tp5GQ2GM3wPP-qE3imXCRXrQ&usqp=CAU",<br/>    alt:"Sonic the Hedgehog 2",<br/>    watch:"https://youtube.com/embed/G5kzUpWAusI?feature=shared",<br/>    likes:"843K"<br/>  },<br/>  {<br/>    name:"Godzilla: King of the Monsters",<br/>    duration:"2h 12m",<br/>    views:"529M views",<br/>    time:TimeAgo("2019-05-31"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQHjZiHusOCiGcD4nNPJiDDU8wQQlEm2GQqOA&usqp=CAU",<br/>    alt:"Godzilla: King of the Monsters",<br/>    watch:"https://youtube.com/embed/5BxqahE0fu8?si=mCdMeTcKf7aw9ww3",<br/>    likes:"1M"<br/>  },<br/>  {<br/>    name:"The Old Guard",<br/>    duration:"2h 5m",<br/>    views:"1.2B views",<br/>    time:TimeAgo("2020-07-10"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRsjedaWOZLnD6PDvTN0OT8pKdKlqRsQZFgdA&usqp=CAU",<br/>    alt:"The Old Guard",<br/>    watch:"https://youtube.com/embed/aK-X2d0lJ_s?si=zixKYSmLJprDeW8b",<br/>    likes:"3.5M"<br/>  },<br/>  {<br/>    name:"Bad Boys for Life",<br/>    duration:"2h 4m",<br/>    views:"823M views",<br/>    time:TimeAgo("2020-01-17"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRtnb04cyL6FWhbz5YRGYXVOcvg93ASZ6t_dg&usqp=CAU",<br/>    alt:"Bad Boys for Life",<br/>    watch:"https://youtube.com/embed/jKCj3XuPG8M?si=Ye8nlauyIimPsBIw",<br/>    likes:"922K"<br/>  },<br/>  {<br/>    name:"Raya and the Last Dragon",<br/>    duration:"1h 47m",<br/>    views:"923M views",<br/>    time:TimeAgo("2021-03-05"),<br/>    src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTVcqyx_OHNoLQ5ecBlDyo2gliqqL0h1k2kvQ&usqp=CAU",<br/>    alt:"Raya and the Last Dragon",<br/>    watch:"https://youtube.com/embed/1VIZ89FEjYI?si=2EFmdMGrYC9qHiNB",<br/>    likes:"1.2M"<br/>  },<br/>  <br/>  {<br/>    name: "Star Wars: The Last Jedi",<br/>    duration: "2h 32m",<br/>    views: "2.1B views",<br/>    time: TimeAgo("2017-12-15"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRJwFL1fMKaMHmjzotXZiGy0hFCEX7wxhJT9w&usqp=CAU",<br/>    alt: "Star Wars: The Last Jedi",<br/>    watch:"https://youtube.com/embed/Q0CbN8sfihY?si=NVUxHM3woLJ6CTq3",<br/>    likes:"19M"<br/>  },<br/>  {<br/>    name: "Thor: Ragnarok",<br/>    duration: "2h 10m",<br/>    views: "1.7B views",<br/>    time: TimeAgo("2017-03-11"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRft7WzGmfJ6DXVbplr1xnzX9izPdCGOVoG3Q&usqp=CAU",<br/>    alt: "Thor: Ragnarok",<br/>    watch:"https://youtube.com/embed/ue80QwXMRHg?si=OQgoTIIF7jRIlpz3",<br/>    likes:"11M"<br/>  },<br/>  {<br/>    name: "Beauty and the Beast",<br/>    duration: "2h 10m",<br/>    views: "768M views",<br/>    time: TimeAgo("2017-03-17"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSsDEOC_UL2QmdO8toMgdkXKnN0YO2QHRABGQ&usqp=CAU",<br/>    alt: "Beauty and the Beast",<br/>    watch:"https://youtube.com/embed/axySrE0Kg6k?si=pnzqeptHrIsa8fbo",<br/>    likes:"732K"<br/>  },<br/>  {<br/>    name: "Mission: Impossible - Fallout",<br/>    duration: "2h 28m",<br/>    views: "4.2B views",<br/>    time: TimeAgo("2018-07-27"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQmysn5Vu0oO3x5O6rkvCqtB_uuck7-XasFUQ&usqp=CAU",<br/>    alt: "Mission: Impossible - Fallout",<br/>    watch:"https://youtube.com/embed/wb49-oV0F78?si=3A_X-hCh53OPutGC",<br/>    likes:"8M"<br/>  },<br/>  {<br/>    name: "Titanic",<br/>    duration: "3h 14m",<br/>    views: "6.9B views",<br/>    time: TimeAgo("1997-12-19"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRT88dIU28jkPhEFk7C5oR08QzessjFl4PdVw&usqp=CAU",<br/>    alt: "Titanic",<br/>    watch:"https://youtube.com/embed/F2RnxZnubCM?si=7MmDrtyaEJDlQuPy",<br/>    likes:"21M"<br/>  },<br/>  {<br/>    name: "Little Women",<br/>    duration: "2h 15m",<br/>    views: "872M views",<br/>    time: TimeAgo("2019-12-25"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRP0fC2rayAHZazVVBvc5fj8eXIy_1Tl3wNsw&usqp=CAU",<br/>    alt: "Little Women",<br/>    watch:"https://youtube.com/embed/3cEg2HCl50I?si=f1z4CEi7nBL6UtX3",<br/>    likes:"922K"<br/>  },<br/>  {<br/>    name: "The Hunger Games: Catching Fire",<br/>    duration: "2h 26m",<br/>    views: "8.2B views",<br/>    time: TimeAgo("2013-11-20"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRc3X8H_5238k48eI6sft-FT1F7G2bOWZWi2w&usqp=CAU",<br/>    alt: "The Hunger Games: Catching Fire",<br/>    watch:"https://youtube.com/embed/EAzGXqJSDJ8?si=2y_Xs5LpomIruBdJ",<br/>    likes:"8M"<br/>  },<br/>  {<br/>    name: "Guardians of the Galaxy",<br/>    duration: "2h 2m",<br/>    views: "1.6B views",<br/>    time: TimeAgo("2014-08-01"),<br/>    src: "https://prod-ripcut-delivery.disney-plus.net/v1/variant/disney/C1C0181ED7342217394E5AC940003A8653E3311B6016194749B29A0FE3F238EB/scale?width=1200&aspectRatio=1.78&format=jpeg",<br/>    alt: "Guardians of the Galaxy",<br/>    watch:"https://youtube.com/embed/u3V5KDHRQvk?si=LZz8Dw08C3fI6tzY",<br/>    likes:"1.03M"<br/>  },<br/>  {<br/>    name: "Jurassic World",<br/>    duration: "2h 4m",<br/>    views: "2.1B views",<br/>    time: TimeAgo("2015-06-12"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS8V78hr8u5Z0qsmKtE6JPZ-v7egRCxW-A-Rg&usqp=CAU",<br/>    alt: "Jurassic World",<br/>    watch:"https://youtube.com/embed/FtCslvCjZEY?si=nq3S7usC_lCoUYPc",<br/>    likes:"2.4M"<br/>  },<br/>  {<br/>    name: "The Jungle Book",<br/>    duration: "1h 46m",<br/>    views: "2.5B views",<br/>    time: TimeAgo("2016-04-15"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfcgd_5v_WbabvBVX8nS7334QmttdF37mH7w&usqp=CAU",<br/>    alt: "The Jungle Book",<br/>    watch:"https://youtube.com/embed/-8EJ9uhsfQQ?si=CTCQt8HpXsL46AOn",<br/>    likes:"982K"<br/>  },<br/>  {<br/>    name: "Avatar",<br/>    duration: "2h 42m",<br/>    views: "285M views",<br/>    time: TimeAgo("2022-09-25"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQii8JcLJdVUIFPTHVQs3_s1LaklZzy8qiu2A&usqp=CAU",<br/>    alt: "Avatar",<br/>    watch:"https://youtube.com/embed/PLtgIILX7E8?si=eKi54esDANdIc2DA",<br/>    likes:"282K"<br/>  },<br/>  {<br/>    name: "Spider-Man: Across the Spider-Verse",<br/>    duration: "2h 20m",<br/>    views: "488M views",<br/>    time: TimeAgo("2023-06-03"),<br/>    src: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRyNucqbn-JAApdOPshoEZcS6hSEpaojxhGIA&usqp=CAU",<br/>    alt: "Spider-Man: Across the Spider-Verse",<br/>    watch:"https://youtube.com/embed/shW9i6k8cB0?si=NX9v41gwwON5XKO7",<br/>    likes:"298K"<br/>  }<br/>  ];<br/>  <br/>  <br/>  //Movies List Cut to 12 for Tailored<br/>  const Tmovies = movies.slice(0,12);<br/>  <br/>  //Movies Map<br/>  const MoviesList = () =>{<br/>  const {<br/>     hstate,<br/>     setHstate,<br/>     mstate,<br/>     setMstate,<br/>     sstate,<br/>     setSstate,<br/>     pstate,<br/>     setPstate,<br/>     focuss<br/> } = useContext(FooterContext);<br/> let MoviesCompo = () =>{<br/>     setHstate(false);<br/>     setMstate(true);<br/>     setSstate(false);<br/>     setPstate(false);<br/> }<br/>      return(<br/>         <><br/>          {Tmovies.map((movie,i)=>(<br/>         <li className="list-item" key={i} onClick={MoviesCompo}><br/>            <div className="m-icon"><br/>             <img src={movie.src} alt={movie.alt} loading="lazy" /><br/>             <i className="fa fa-play"></i><br/>            </div><br/>            <div className="m-info"><br/>             <div className="m-name"><br/>                {movie.name}<br/>             </div><br/>             <div className="m-desc"><br/>              <div className="m-his"><br/>               <i className="fa fa-history"></i> {movie.time}<br/>              </div><br/>              <div className="m-his"><br/>               <i className="fa fa-eye"></i> {movie.views}<br/>              </div><br/>              <div className="m-his"><br/>               <i className="fa fa-clock"></i> {movie.duration}<br/>              </div><br/>             </div><br/>            </div><br/>          </li>))}<br/>         </><br/>      );<br/>  }<br/> <br/> //Tailored For you<br/> const TailoredForYou = () =>{<br/>  return(<br/>   <><br/>     <div className="tailored-cont"><br/>      <div className="tailored-title"><br/>       Tailored For You:<br/>      </div><br/>       <div className="tailored-list-cont"><br/>       <ul><br/>         <MoviesList /><br/>       </ul><br/>       </div><br/>     </div><br/>   </><br/>  );<br/> }<div></div>    <br/>  //General Footer<br/> const Footer = () =>{<br/> const {<br/>     hstate,<br/>     setHstate,<br/>     mstate,<br/>     setMstate,<br/>     sstate,<br/>     setSstate,<br/>     pstate,<br/>     setPstate,<br/>     focuss<br/> } = useContext(FooterContext);<br/> <br/> let HomeCompo = () =>{<br/>     setHstate(true);<br/>     setMstate(false);<br/>     setSstate(false);<br/>     setPstate(false);<br/> }<br/> <br/> let MoviesCompo = () =>{<br/>     setHstate(false);<br/>     setMstate(true);<br/>     setSstate(false);<br/>     setPstate(false);<br/> }<br/> <br/> let SearchCompo = () =>{<br/>     setHstate(false);<br/>     setMstate(false);<br/>     setSstate(true);<br/>     setPstate(false);<br/> }<br/> <br/> let ProfileCompo = () =>{<br/>     setHstate(false);<br/>     setMstate(false);<br/>     setSstate(false);<br/>     setPstate(true);<br/> }<br/> const activeh = hstate ? "#1b47c2" : "#000";<br/> const activem = mstate ? "#1b47c2" : "#000";<br/> const actives = sstate ? "#1b47c2" : "#000";<br/> const activep = pstate ? "#1b47c2" : "#000";<br/> const fcs = focuss ? "none" : "flex";<br/>   return(<br/>    <footer style={{display:fcs}}><br/>     <div className="icon-cont"<br/>     onClick={HomeCompo} style={{color:activeh}}<br/>     ><br/>       <i className="fa fa-house icon-active"></i><br/>       <div className="icon-text"<br/>       style={{color:activeh}}<br/>       >Home</div><br/>     </div><br/>     <div className="icon-cont"<br/>     onClick={MoviesCompo} style={{color:activem}}<br/>     ><br/>      <i className="fa fa-video"></i><br/>      <div className="icon-text"<br/>      style={{color:activem}}<br/>      >Movies</div><br/>     </div><br/>      <div className="icon-cont"<br/>      onClick={SearchCompo} style={{color:actives}}<br/>      ><br/>       <i className="fa fa-search"></i><br/>       <div className="icon-text"<br/>       style={{color:actives}}<br/>       >Search</div><br/>      </div><br/>      <div className="icon-cont"<br/>      onClick={ProfileCompo} style={{color:activep}}<br/>      ><br/>       <i className="fa fa-user"></i><br/>       <div className="icon-text"<br/>       style={{color:activep}}<br/>       >Profile</div><br/>      </div><br/>    </footer><br/>     );<br/>   }<br/>   <br/>   <br/>   const Home = () =>{<br/> const {hstate} = useContext(FooterContext);<br/> const hideShow = hstate ? "grid" : "none";<br/>     return(<br/>      <><br/>         <div className="home_cont"<br/>         style={{display:hideShow}}<br/>         ><br/>         <Top /><br/>          <div className="home"><br/>            <LayoutMovieCard /><br/>            <TailoredForYou /><br/>           </div><br/>          <Footer /><br/>         </div><br/>      </><br/>     )<br/> }<br/> const Movies = () =>{<br/> const {mstate,setMstate} = useContext(FooterContext);<br/> const MoviesPlayCont = useRef(null);<br/> const hideShow = mstate ? "grid" : "none";<br/> const MoviesPlay = mstate ? "none" : "block";<br/> const [videosPlayInfo, setVideosPlayInfo] = useState([]);<div></div>let MovieClick = (movie) => {<br/>  setMstate(false);<br/>  MoviesPlayCont.current.style.display = "block";<br/>  setVideosPlayInfo([movie]);<br/>};<br/> let BackFromMovies = () =>{<br/>     setMstate(true); MoviesPlayCont.current.style.display="none";<br/> }<br/>     return(<br/>         <><br/>     <div className="movies-play-cont" ref={MoviesPlayCont}><br/>  <div className="movies-play-head"><br/>    <i className="fa fa-arrow-left" onClick={BackFromMovies}></i><br/>  </div><br/>  {videosPlayInfo.map((movie, i) => (<br/>    <div key={i}><br/>      <div className="video-play-cont"><br/>     <iframe src={movie.watch} frameBorder="0" id="frame" <br/>     width="100%"<br/>     height="300px"></iframe><br/>      </div><br/>      <div className="video-info-cont"><br/>        <div className="video-name">{movie.name}</div><br/>        <div className="video-desc"><br/>          <div className="video-views">{movie.views}</div><br/>          <div className="video-time">{movie.time}</div><br/>          </div><br/>          <br/>          <div className="icons-cont"><br/>            <div className="item"><br/>             <i className="fa fa-thumbs-up"></i> <div className="text">Likes</div><div className="caret">|</div><div className="like-count">{movie.likes}</div><br/>            </div><br/>            <div className="item"><br/>             <i className="material-symbols-outlined"><br/>share<br/></i><div className="text">Share</div><br/>            </div><br/>            <div className="item"><br/>             <i className="fa fa-scissors"><br/></i><div className="text">Clip</div><br/>            </div><br/>            <div className="item"><br/>            <i className="material-symbols-outlined"><br/>library_add<br/></i><div className="text">Save</div><br/>            </div><br/>            <div className="item"><br/>             <i className="material-symbols-outlined"><br/>subscriptions<br/></i><div className="text">Subscriptions</div><br/>            </div><br/>            <div className="item"><br/>             <i className="material-symbols-outlined"><br/>block<br/></i><div className="text">Stop ads</div><br/>            </div><br/>          </div><br/>    <br/>      </div><br/>      <div className="recommended-text"><br/>        Recommended<br/>      </div><br/>       <div className="recommended-cont"><br/>      {movies.map((mov, i2) => (<br/>     <div key={i2}><br/>        <img className="recommended-movie" <br/>        src={mov.src}<br/>        loading="lazy"<br/>         onClick={()=>MovieClick(mov)}/><br/>      </div><br/>      ))}<br/>      </div><br/>    </div><br/>  ))}<br/></div><br/>         <div className="movies_cont"<br/>         style={{display:hideShow}}<br/>         ><br/>             <div className="movies"><br/>              <div className="mov-title"><br/>               <i className="fa fa-layer-group"></i> Latest Movies<br/>              </div><br/>              <div className="mov-list-cont"><br/>               {movies.map((movie,i)=>(<br/>         <li className="list-item2" key={i} onClick={()=>MovieClick(movie)}><br/>            <div className="m-icon"><br/>             <img src={movie.src} alt={movie.alt} loading="lazy" /><br/>             <i className="fa fa-play"></i><br/>            </div><br/>            <div className="m-info"><br/>             <div className="m-name"><br/>                {movie.name}<br/>             </div><br/>             <div className="m-desc"><br/>              <div className="m-his"><br/>               <i className="fa fa-eye"></i> {movie.views}<br/>              </div><br/>              <div className="m-his"><br/>               <i className="fa fa-clock"></i> {movie.duration}<br/>              </div><br/>             </div><br/>            </div><br/>          </li>))}<br/>              </div><br/>             </div><br/>             <Footer /><br/>         </div><br/>         </><br/>     );<br/> }<br/> const Search = () =>{<br/>  const {<br/>     hstate,<br/>     setHstate,<br/>     mstate,<br/>     setMstate,<br/>     sstate,<br/>     setSstate,<br/>     pstate,<br/>     setPstate,<br/>     focuss,<br/>     setFocuss<br/> } = useContext(FooterContext);<br/> let MoviesCompo = () =>{<br/>     setHstate(false);<br/>     setMstate(true);<br/>     setSstate(false);<br/>     setPstate(false);<br/> }<br/>  const [ searchInput,setSearchInput ] = useState('');<br/>  if(!movies){<br/>      return(<br/>          <div>Loading...</div><br/>      );<br/>  }<br/>  let handleInputChange = (e) =>{<br/>      setSearchInput(e.target.value);<br/>  }<br/>  const filteredMovies = movies.filter((movie)=><br/>      movie.name.toLowerCase().includes(searchInput.toLowerCase())<br/>  );<br/>  const isSearching = searchInput.trim()!=="";<br/> const hideShow = sstate ? "grid" : "none";<br/>  let HandleFocus = () =>{<br/>      setFocuss(true);<br/>  }<br/>  let HandleBlur = () =>{<br/>      setFocuss(false);<br/>  }<br/>     return(<br/>       <><br/>        <div className="search_cont"<br/>        style={{display:hideShow}}<br/>        ><br/>         <div className="search"><br/>          <div className="search-nav"><br/>            <div className="search-box"><br/>             <input<br/>              type="text"<br/>              placeholder="Search..."<br/>              autoCapitalize="off"<br/>              onChange={ handleInputChange }<br/>              onFocus={HandleFocus}<br/>              onBlur={HandleBlur}<br/>              value={ searchInput }<br/>              id="search" /><br/>              <i className="fa fa-search"<br/>              ><br/>              </i><br/>            </div><br/>          </div><br/>          <div className="result-cont"><br/>          {isSearching ? (<br/>              filteredMovies.length === 0 ? (<br/>            <div className="msg_cont"><br/>             <div>No movies found for "{searchInput}"</div><br/>            </div><br/>              ) : (<br/>                <ul><br/>                  {filteredMovies.map((movie, i) => (<br/>                    <li className="list-item3" key={i} onClick={MoviesCompo}><br/>            <div className="m-icon"><br/>             <img src={movie.src} alt={movie.alt} loading="lazy" /><br/>             <i className="fa fa-play"></i><br/>            </div><br/>            <div className="m-info"><br/>             <div className="m-name"><br/>                {movie.name}<br/>             </div><br/>             <div className="m-desc"><br/>              <div className="m-his"><br/>               <i className="fa fa-history"></i> {movie.time}<br/>              </div><br/>              <div className="m-his"><br/>               <i className="fa fa-eye"></i> {movie.views}<br/>              </div><br/>              <div className="m-his"><br/>               <i className="fa fa-clock"></i> {movie.duration}<br/>              </div><br/>             </div><br/>            </div><br/>          </li><br/>                  ))}<br/>                </ul><br/>              )<br/>            ) : (<br/>            <div className="msg_cont"><br/>              <div>Enter a search query to find movies.</div><br/>              </div><br/>            )}<br/>          </div><br/>        </div><br/>         <Footer /><br/>        </div><br/>       </><br/>     );<br/> }<br/> <br/> const firebaseConfig = {<br/>      apiKey: "AIzaSyDqrR-zYrBlANZbwATg02w3fsEJk84x0-g",<br/>      authDomain: "nasflix-15f8c.firebaseapp.com",<br/>      databaseURL: "https://nasflix-15f8c-default-rtdb.firebaseio.com",<br/>      projectId: "nasflix-15f8c",<br/>      storageBucket: "nasflix-15f8c.appspot.com",<br/>      messagingSenderId: "662513276162",<br/>      appId: "1:662513276162:web:363f403843c94233c29e1b"<br/>    };<br/>    if (!firebase.apps.length) {<br/>            firebase.initializeApp(firebaseConfig);<br/>        }<br/> const Profile = () =>{<br/>  const {pstate, setFocuss,login,setLogin,username,setUsername,isLogin,setIslogin,isAround,setIsaround,showChangeInfo,setShowChangeInfo,messages,setMessages,setFetchedData,fetchedData,setResetEmail,ResetEmail,setFeedbacksCount,feedbacksCount} = useContext(FooterContext);<br/> const hideShow = pstate ? "grid" : "none";<br/> let HandleFocus = () =>{<br/>      setFocuss(true);<br/>  }<br/>  let HandleBlur = () =>{<br/>      setFocuss(false);<br/>  }<br/>  let HandleReg = () =>{<br/>      setLogin(!login);<br/>  }<br/>  const Lshow = login ? "flex" : "none";<br/>  const Rshow = login ? "none" : "flex";<br/>  const Logintext = login ? "Login" : "SignUp";<br/>  const LoginFade = isLogin ? "none" : "flex";<br/>  const GetOutt = isAround ? "block" : "none";<br/>  <br/> const DetailList = isAround ? "none" : "flex";<br/>  <br/>  const usernameRefL = useRef(null);<br/>  const passwordRefL = useRef(null);<br/>  <br/>// const Lcont = useRef(null);<br/> // const Rcont = useRef(null);<br/> // const LogText = useRef(null);<br/>  <br/>  const usernameRefR = useRef(null);<br/>  const emailRefR = useRef(null);<br/>  const passwordRefR = useRef(null);<br/>  const cpasswordRefR = useRef(null);<br/>  <br/>  const userDivR = useRef(null);<br/>  const emailDivR = useRef(null);<br/>  const passDivR = useRef(null);<br/>  const cpassDivR = useRef(null);<br/>  <br/>  const hideshowprofilecont = useRef(null);<br/>  const Pinfoedit = useRef(null);<br/>  const feedbackcontref = useRef(null);<br/>  const feedvalue = useRef(null);<br/>  const loginboxref = useRef(null);<br/>  const forgotboxref = useRef(null);<br/>  <br/>  const bodyref = useRef(null);<br/>  const loaderref = useRef(null);<br/>  <br/>  const userDivL = useRef(null);<br/>  const passDivL = useRef(null);<br/>  const forgotDiv = useRef(null);<br/>  const forgotInp = useRef(null);<br/>  const ficonl = useRef(null);<br/>  <br/>  <br/>  const uiconr = useRef(null);<br/>  const eiconr = useRef(null);<br/>  const piconr = useRef(null); <br/>  const cpiconr = useRef(null);<br/>  <br/>  const errmsgR = useRef(null);<br/>  const errmsgL = useRef(null);<br/>  const errmsgP = useRef(null);<br/>  const errmsgF = useRef(null);<br/>  <br/>  const uiconl = useRef(null);<br/>  const piconl = useRef(null);<br/>  <br/>  const userL = usernameRefL.current;<br/>  const passL = passwordRefL.current;<br/>  <br/>  const userR = usernameRefR.current;<br/>  const emailR = emailRefR.current;<br/>  const passR = passwordRefR.current;<br/>  const cpassR = cpasswordRefR.current;<br/>  <br/>  const [currentUserUid, setCurrentUserUid] = useState(null);<br/>  <br/>  useEffect(() => {<br/>    const unsubscribe = firebase.auth().onAuthStateChanged((user) => {<br/>      if (user) {<br/>        setCurrentUserUid(user.uid);<br/>        setTimeout(() => {<br/>          setIslogin(true);<br/>          setIsaround(false);<br/>        }, 1000);<br/>      } else {<br/>        setCurrentUserUid(null);<br/>      }<br/>    });<br/>    return () => unsubscribe();<br/>  }, []);<br/>  <br/>let HandleSignup = () =>{<br/>  if(userR.value=="" || userR.value==null){<br/>emailDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>eiconr.current.style.display="none";<br/>piconr.current.style.display="none";<br/>cpiconr.current.style.display="none"; <br/> <br/>        userDivR.current.style.border="2px solid red";<br/>      uiconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Username cannot be empty. Please enter a username";<br/>     userR.focus();<br/>   }else if(userR.value.length<5){<br/>emailDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>eiconr.current.style.display="none";<br/>piconr.current.style.display="none";<br/>cpiconr.current.style.display="none"; <div></div>       userDivR.current.style.border="2px solid red";<br/>      uiconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Username must be at least 5 characters long";<br/>     userR.focus();<br/>   }else if(emailR.value==""||emailR.value==null){<br/>       userDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>piconr.current.style.display="none";<br/>cpiconr.current.style.display="none"; <div></div>emailDivR.current.style.border="2px solid red";<br/>      eiconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Email cannot be empty. Please enter your email";<br/>     emailR.focus();<br/>   }else if(emailR.value.indexOf("@")<1 || emailR.value.lastIndexOf(".")<emailR.value.indexOf("@")+2 || emailR.value.lastIndexOf(".")+2>=emailR.value.length){<br/>       userDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>piconr.current.style.display="none";<br/>cpiconr.current.style.display="none"; <div></div>emailDivR.current.style.border="2px solid red";<br/>      eiconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Invalid email format. Please enter a valid email address";<br/>     emailR.focus();<br/>   }else if(passR.value==""||passR.value==null){<br/>       userDivR.current.style.border="none";<br/>emailDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>eiconr.current.style.display="none";<br/>cpiconr.current.style.display="none"; <br/>     <br/>     passDivR.current.style.border="2px solid red";<br/>      piconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Password cannot be empty. Please enter a password";<br/>     passR.focus();<br/>   }else if(passR.value.length<6){<br/>       userDivR.current.style.border="none";<br/>emailDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>eiconr.current.style.display="none";<br/>cpiconr.current.style.display="none"; <br/>     <br/>     passDivR.current.style.border="2px solid red";<br/>      piconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Password must be at least 6 characters long. Please choose a stronger password";<br/>     passR.focus();<br/>   }else if(cpassR.value.length<6){<br/>       userDivR.current.style.border="none";<br/>emailDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>eiconr.current.style.display="none";<br/>piconr.current.style.display="none"; <br/>     <br/>     cpassDivR.current.style.border="2px solid red";<br/>      cpiconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Please confirm your password. The confirmation password cannot be empty";<br/>     cpassR.focus();<br/>   }else if(cpassR.value!==passR.value){<br/>       userDivR.current.style.border="none";<br/>emailDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>eiconr.current.style.display="none";<br/>piconr.current.style.display="none";<br/>     <br/>     cpassDivR.current.style.border="2px solid red";<br/>      cpiconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="Passwords do not match. Please make sure the passwords match";<br/>     cpassR.focus();<br/>     }else{<br/>         userDivR.current.style.border="none";<br/>emailDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>eiconr.current.style.display="none";<br/>piconr.current.style.display="none";<br/>cpiconr.current.style.display="none";<br/>     <br/>     let regEmail = emailR.value;<br/>let regPass = passR.value;<br/>let regUsername = userR.value.trim().toLowerCase(); // Get the username from the input field<br/>firebase.auth().createUserWithEmailAndPassword(regEmail, regPass)<br/>  .then((userCredential) => {<br/>    // Signed in <br/>    var user = userCredential.user;<br/>    // Save user data to the database and update user profile<br/>    let database = firebase.database();<br/>    let usersRef = database.ref('users');<br/>    usersRef.child(user.uid).set({<br/>      email: regEmail,<br/>      username: regUsername, // Save the username to the database<br/>    })<br/>    .then(() => {<br/>      // Update user profile with the provided username<br/>      user.updateProfile({<br/>        displayName: regUsername<br/>      }).then(() => {<br/>        errmsgR.current.firstChild.textContent = "Registration Successful. Please Login";<br/>        errmsgR.current.style.display = "flex";<br/>        errmsgR.current.firstChild.style.background = "yellowgreen";<br/>        setResetEmail(regEmail);<br/>        setUsername(regUsername); // Set the username in the state for later use<br/>        userR.value = "";<br/>        emailR.value = "";<br/>        passR.value = "";<br/>        cpassR.value = "";<br/>        userL.value = "";<br/>        passL.value = "";<br/>        const Logintext = "";<br/>        setTimeout(() => {<br/>          setLogin(!login);<br/>          setIslogin(true);<br/>          setIsaround(false);<br/>        }, 1000);<br/>      }).catch((error) => {<br/>        // Handle profile update error<br/>      });<br/>    })<br/>    .catch((error) => {<br/>      // Handle database error<br/>    });<br/>  })<br/>  .catch((error) => {<br/>    let errorCode = error.code;<br/>    let errorMessage = error.message;<br/>    // Handle registration error<br/>    // ...<br/>    if(errorCode === "auth/email-already-in-use"){<br/>        userDivR.current.style.border="none";<br/>passDivR.current.style.border="none";<br/>cpassDivR.current.style.border="none";<br/>uiconr.current.style.display="none";<br/>piconr.current.style.display="none";<br/>cpiconr.current.style.display="none"; <div></div>emailDivR.current.style.border="2px solid red";<br/>      eiconr.current.style.display="block";<br/>     errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     ="This email address is already registered. Please choose another email address or try logging in if you already have an account";<br/>     emailR.focus();<br/>    }else{<br/>        errmsgR.current.style.display="flex";<br/>     errmsgR.current.firstChild.textContent<br/>     =error.message;<br/>    }<br/>  });<br/>     <br/>     }<br/> }<br/> <br/> let HandleLogin = () =>{<br/>     if(userL.value=="" || userL.value==null){<br/>        <br/>passDivL.current.style.border="none"; <br/>piconl.current.style.display="none";<div></div>        userDivL.current.style.border="2px solid red";<br/>      uiconl.current.style.display="block";<br/>     errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Email cannot be empty. Please enter your email";<br/>     userL.focus();<br/>     }else if(passL.value==""||passL.value==null){<br/>         userDivL.current.style.border="none"; <br/>uiconl.current.style.display="none";<div></div>        passDivL.current.style.border="2px solid red";<br/>      piconl.current.style.display="block";<br/>     errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Password cannot be empty. Please enter your password to log in";<br/>     passL.focus();<br/>     }else{<br/>       userDivL.current.style.border="none"; <br/>uiconl.current.style.display="none";<br/>passDivL.current.style.border="none"; <br/>piconl.current.style.display="none";<br/>        <br/>        firebase.auth().signInWithEmailAndPassword(userL.value, passL.value)<br/>  .then((userCredential) => {<br/>    // Signed in<br/>    setResetEmail(userL.value);<br/>    var user = userCredential.user;<div></div>    // Retrieve the username from the database based on user's email<br/>    let database = firebase.database();<br/>    let usersRef = database.ref('users');<br/>    usersRef.orderByChild('email').equalTo(user.email).once('value', (snapshot) => {<br/>      if (snapshot.exists()) {<br/>        let userData = snapshot.val();<br/>        let userId = Object.keys(userData)[0];<br/>        setUsername(userData[userId].username); // Set the retrieved username to state<br/>      }<br/>    });<div></div>    errmsgL.current.style.display = "flex";<br/>    errmsgL.current.firstChild.style.background = "yellowgreen";<br/>    errmsgL.current.firstChild.textContent = "Login Successful!";<br/>    const Logintext = "";<br/>    userR.value = "";<br/>    emailR.value = "";<br/>    passR.value = "";<br/>    cpassR.value = "";<br/>    userL.value = "";<br/>    passL.value = "";<br/>  })<br/>  .catch((error) => {<br/>    let errorCode = error.code;<br/>  if(errorCode === "auth/internal-error"){<br/>        passDivL.current.style.border="none"; <br/>piconl.current.style.display="none";<div></div>        passDivL.current.style.border="2px solid red";<br/>      piconl.current.style.display="block";<br/>     errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Incorrect username or password. Please check your credentials and try again";<br/>     passL.focus();<br/>    }else if(errorCode === "auth/invalid-email"){<br/>        passDivL.current.style.border="none"; <br/>piconl.current.style.display="none";<div></div>        userDivL.current.style.border="2px solid red";<br/>      uiconl.current.style.display="block";<br/>     errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Invalid email address. Please enter a valid email";<br/>     userL.focus();<br/>    }else if(errorCode === "auth/wrong-password"){<br/>        userDivL.current.style.border="none"; <br/>uiconl.current.style.display="none";<div></div>        passDivL.current.style.border="2px solid red";<br/>      piconl.current.style.display="block";<br/>     errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Invalid password. Please enter a valid password with at least 6 characters";<br/>     passL.focus();<br/>    }else if(errorCode === "auth/too-many-requests"){<br/>        passDivL.current.style.border="none"; <br/>piconl.current.style.display="none";<br/>passDivL.current.style.border="none"; <br/>piconl.current.style.display="none";<div></div>     errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Too many incorrect password attempts. Please try again later or reset your password";<br/>     userL.focus();<br/>    }else if(errorCode === "auth/user-disabled"){<br/>        passDivL.current.style.border="none"; <br/>piconl.current.style.display="none";<div></div>        userDivL.current.style.border="2px solid red";<br/>      uiconl.current.style.display="block";<br/>     errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Account disabled. Please contact support for assistance";<br/>     userL.focus();<br/>    }else{<br/>        errmsgL.current.style.display="flex";<br/>     errmsgL.current.firstChild.textContent<br/>     =error.message;<br/>    }<br/>  });<br/>     }<br/> }<br/>  let HandleLogout = () =>{<br/>      firebase.auth().signOut();<br/>      setIslogin(false);<br/>      setIsaround(true);<br/>      errmsgL.current.style.display="flex";<br/>      errmsgL.current.firstChild.style.background="red";<br/>     errmsgL.current.firstChild.textContent<br/>     ="Logged Out!";<br/>  }<br/>  <br/>  let HandleChangeP = (e) =>{<br/>      setUsername(e.target.value);<br/>  }<br/>const feedbacksRef = firebase.database().ref('SoloFeedBacks');<div></div>const HandleSaveP = async () => {<br/>  // Get the new username and current user details, trim and convert to lowercase<br/>  const newUsername = username.trim().toLowerCase();<br/>  const currentUser = firebase.auth().currentUser;<br/>  // Check if there's a logged-in user<br/>  if (!currentUser) {<br/>    return;<br/>  }<div></div>  const currentUserUid = currentUser.uid;<br/>  const usersRef = firebase.database().ref('users');<br/>  const feedbacksRef = firebase.database().ref('SoloFeedBacks');<br/>  // Display error if username is empty or less than 5 characters<br/>  if (newUsername === '') {<br/>    errmsgP.current.style.display = 'flex';<br/>    errmsgP.current.firstChild.style.background = 'red';<br/>    errmsgP.current.firstChild.textContent = 'Username must not be empty';<br/>    return;<br/>  } else if (newUsername.length < 5) {<br/>    errmsgP.current.style.display = 'flex';<br/>    errmsgP.current.firstChild.style.background = 'red';<br/>    errmsgP.current.firstChild.textContent = 'Username must be 5 characters long';<br/>    return;<br/>  }<br/>  try {<br/>    // Check if the new username exists in users (case-insensitive)<br/>    const usersSnapshot = await usersRef.orderByChild('username').equalTo(newUsername).once('value');<br/>    let usernameExists = false;<br/>    // Check if the new username exists in users<br/>    if (usersSnapshot.exists()) {<br/>      Object.keys(usersSnapshot.val()).forEach((uid) => {<br/>        if (uid !== currentUserUid) {<br/>          usernameExists = true;<br/>        }<br/>      });<br/>    }<br/>    // Display appropriate error messages based on username existence<br/>    if (usernameExists) {<br/>      errmsgP.current.style.display = 'flex';<br/>      errmsgP.current.firstChild.style.background = 'red';<br/>      errmsgP.current.firstChild.textContent = 'Username already exists';<br/>    } else {<br/>      // Update username in users<br/>      await usersRef.child(currentUserUid).update({ username: newUsername });<br/>      // Update username in messages<br/>      await updateMessagesUsername(currentUserUid, newUsername);<br/>      // Display success message<br/>      errmsgP.current.style.display = 'flex';<br/>      errmsgP.current.firstChild.style.background = 'yellowgreen';<br/>      errmsgP.current.firstChild.textContent = 'Changes saved successfully!';<br/>      // Hide profile container after 500 milliseconds<br/>      setTimeout(() => {<br/>        hideshowprofilecont.current.style.display = 'flex';<br/>        setShowChangeInfo(false);<br/>      }, 500);<br/>    }<br/>  } catch (error) {<br/>    console.error('Error updating username: ', error);<br/>  }<br/>};<div></div>const updateMessagesUsername = async (userId, newUsername) => {<br/>  try {<br/>    const messagesSnapshot = await feedbacksRef.orderByChild('user_id').equalTo(userId).once('value');<br/>    <br/>    if (messagesSnapshot.exists()) {<br/>      const updates = {};<br/>      messagesSnapshot.forEach((messageSnapshot) => {<br/>        const messageId = messageSnapshot.key;<br/>        updates[messageId + '/user'] = newUsername;<br/>      });<br/>      await feedbacksRef.update(updates);<br/>    }<br/>  } catch (error) {<br/>    console.error('Error updating messages username: ', error);<br/>  }<br/>};<div></div><br/>  let HandleResetPass = () =>{<br/>      let auth = firebase.auth(); auth.sendPasswordResetEmail(ResetEmail).then(function() {<br/>    // Email sent.<br/>    errmsgP.current.style.display="flex";<br/>errmsgP.current.firstChild.style.background="yellowgreen";<br/>errmsgP.current.firstChild.textContent<br/>     ="Reset password link sent! 📧 Check your email inbox";<br/>  }).catch(function(error) {<br/>    // An error happened.<br/>    var errorCode = error.code;<br/>    var errorMessage = error.message;<div></div>    if(errorCode === "auth/invalid-email"){<br/>        errmsgP.current.style.display="flex";<br/>errmsgP.current.firstChild.style.background="red";         errmsgP.current.firstChild.textContent<br/>     ="Invalid Email";<br/>    }else if(errorCode === undefined){<br/>        errmsgP.current.style.display="flex";<br/>errmsgP.current.firstChild.style.background="yellowgreen";     errmsgP.current.firstChild.textContent<br/>     ="Reset password link sent! 📧 Check your email inbox";<br/>    }else{<br/>        errmsgP.current.style.display="flex";<br/>errmsgP.current.firstChild.style.background="red";     errmsgP.current.firstChild.textContent<br/>     =errorMessage;<br/>    }<br/>  });<br/>  }<br/>  const PInfo = showChangeInfo ? "flex" : "none";<br/>  let ShowPernalInfo = () =>{<br/>      setShowChangeInfo(true); hideshowprofilecont.current.style.display="none";<br/>  }<br/>  let SendFeedBack = () =>{<br/>   Pinfoedit.current.style.display="none"; hideshowprofilecont.current.style.display="none";<br/>     feedbackcontref.current.style.display="block";<br/>     bodyref.current.scrollTop = bodyref.current.scrollHeight;<br/>  }<br/>  <br/>  let CloseFeedBack = () =>{ feedbackcontref.current.style.display="none"; hideshowprofilecont.current.style.display="flex";<br/>     feedvalue.current.value="";<br/>  }<br/>  <br/>  useEffect(() => {<br/>    const fetchData = async () => {<br/>      try {<br/>        const response = await fetch("https://ipapi.co/json");<br/>        const data = await response.json();<br/>        setFetchedData([data]);<br/>      } catch (error) {<br/>        console.error("Error fetching data: ", error);<br/>      }<br/>    };<div></div>    fetchData();<br/>  }, []);<br/>  <br/>  <br/>  let HandleSendFeedBack = () => {<br/>  if (feedvalue.current.value.trim() !== "") {<br/>    let database = firebase.database();<br/>    let messageRef = database.ref("SoloFeedBacks");<br/>    let feedinputvalue = feedvalue.current.value;<br/>    <br/>    fetchedData.forEach((item) => {<br/>      messageRef.push({<br/>        user_id: firebase.auth().currentUser.uid, // Save the user's ID with the message<br/>        user: username,<br/>        feedback: feedinputvalue,<br/>        country: item.country_name,<br/>        c_code: item.country_code,<br/>        ip_address: item.ip,<br/>        city: item.city,<br/>        location: item.latitude + "," + item.longitude,<br/>        Network: item.org,<br/>        languages: item.languages,<br/>        timestamp: firebase.database.ServerValue.TIMESTAMP<br/>      });<br/>    });<div></div>    feedvalue.current.value = "";<br/>    feedvalue.current.focus();<br/>    setFocuss(true);<br/>    setTimeout(() => {<br/>      bodyref.current.scrollTop = bodyref.current.scrollHeight;<br/>    }, 10);<br/>  }<br/>};<div></div><br/>useEffect(() => {<br/>  let database = firebase.database();<br/>  let messageRef = database.ref("SoloFeedBacks");<br/>  let usersRef = database.ref("users");<div></div>  const handleChildAdded = (snapshot) => {<br/>    const newMessage = {<br/>      id: snapshot.key,<br/>      user_id: snapshot.val().user_id, // Retrieve the user ID from the database<br/>      user: snapshot.val().user,<br/>      feedback: snapshot.val().feedback,<br/>      time: TimeAgo(snapshot.val().timestamp),<br/>      flag: "fi fi-" + snapshot.val().c_code.toLowerCase(),<br/>      country: snapshot.val().country,<br/>      isverified: false, // Default value, will be updated based on user data<br/>    };<div></div>    if (newMessage.isverified) {<br/>      setMessages((prevMessages) => [...prevMessages, newMessage]);<br/>    } else {<br/>      setMessages((prevMessages) => [...prevMessages, newMessage]);<br/>    }<div></div>    bodyref.current.style.display = "block";<br/>    loaderref.current.style.display = "none";<br/>    setTimeout(() => {<br/>      bodyref.current.scrollTop = bodyref.current.scrollHeight;<br/>    }, 10);<br/>  };<div></div>  const handleUserVerification = (snapshot) => {<br/>    if (snapshot.exists()) {<br/>      const usersData = snapshot.val();<div></div>      // Update isverified for each message based on user verification status<br/>      setMessages((prevMessages) => {<br/>        return prevMessages.map((message) => {<br/>          const userId = message.user_id;<br/>          const user = usersData[userId];<br/>          const isVerified = user && user.isverified;<div></div>          return {<br/>            ...message,<br/>            isverified: isVerified || false, // Set isverified based on user verification status<br/>          };<br/>        });<br/>      });<br/>    }<br/>  };<div></div>  messageRef.on("child_added", handleChildAdded);<br/>  usersRef.on("value", handleUserVerification);<div></div>  messageRef.on("value", (snapshot) => {<br/>    if (snapshot.exists()) {<br/>      const count = Object.keys(snapshot.val()).length;<br/>      setFeedbacksCount(count);<br/>    } else {<br/>      setFeedbacksCount(0);<br/>    }<br/>  });<div></div>  return () => {<br/>    messageRef.off("child_added", handleChildAdded);<br/>    usersRef.off("value", handleUserVerification);<br/>    messageRef.off();<br/>  };<br/>}, []);<div></div><br/>    let Showforgot = () =>{<br/>        loginboxref.current.style.display="none";<br/>        forgotboxref.current.style.display="flex";<br/>    }<br/>    <br/>    let BackFromForgot = () =>{<br/>        loginboxref.current.style.display="flex";<br/>        forgotboxref.current.style.display="none";<br/>    }<br/>    <br/>    let HandleForgotSend = () =>{<br/>        if(forgotInp.current.value=="" || forgotInp.current.value==null){<div></div>        forgotDiv.current.style.border="2px solid red";<br/>      ficonl.current.style.display="block";<br/>     errmsgF.current.style.display="flex";<br/>     errmsgF.current.firstChild.textContent<br/>     ="Email cannot be empty. Please enter your email";<br/>     forgotInp.current.focus();<br/>     }else{<br/>         let auth = firebase.auth(); auth.sendPasswordResetEmail(forgotInp.current.value).then(function() {<br/>    // Email sent.<br/>forgotDiv.current.style.border="none";<br/>ficonl.current.style.display="none";<div></div>    errmsgF.current.style.display="flex";<br/>errmsgF.current.firstChild.style.background="yellowgreen";<br/>errmsgF.current.firstChild.textContent<br/>     ="Reset password link sent! 📧 Check your email inbox";<br/>  }).catch(function(error) {<br/>    // An error happened.<br/>    var errorCode = error.code;<br/>    var errorMessage = error.message;<div></div>    if(errorCode === "auth/invalid-email"){<br/>        errmsgF.current.style.display="flex";<br/>errmsgF.current.firstChild.style.background="red";         errmsgF.current.firstChild.textContent<br/>     ="Invalid Email";<br/>    }else if(errorCode === undefined){<br/>        errmsgP.current.style.display="flex";<br/>errmsgP.current.firstChild.style.background="yellowgreen";     errmsgP.current.firstChild.textContent<br/>     =errorMessage;<br/>     }else{<br/>         errmsgP.current.style.display="flex";<br/>errmsgP.current.firstChild.style.background="yellowgreen";     errmsgP.current.firstChild.textContent<br/>     =errorMessage;<br/>     }<br/>    });<br/>    }<br/>    }<br/>      <br/>      const handleDeleteMessage = (id) => {<br/>    let database = firebase.database();<br/>    let messageRef = database.ref("SoloFeedBacks").child(id);<br/>    messageRef.remove()<br/>        .then(() => {<br/>            //console.log("Message deleted successfully");<br/>        })<br/>        .catch((error) => {<br/>            console.error("Error deleting message: ", error);<br/>        });<br/>        setMessages(prevMessages => prevMessages.filter(message => message.id !== id));<br/>      feedvalue.current.focus();<br/>      setFocuss(true);<br/>};<br/>     return(<br/>         <><br/>          <div className="profile-cont"<br/>          style={{display:hideShow}}<br/>          ><br/>           <div className="profile"><br/>             <div className="profile-ball"><br/>              <div className="welcome-cont"><br/>               <div className="icon"></div><br/>                <div className="welcome"><br/>                 Welcome {username}<br/>                </div><br/>                <div className="login-signup"><br/>               <span style={{display:GetOutt}}> {Logintext} </span><br/>                </div><br/>              </div><br/>             </div><br/>             <br/>             <div className="AllForms" style={{display:LoginFade}}><br/>             <div className="login-box-cont" style={{display:Lshow}} ref={loginboxref}><br/>              <div className="login-box"><br/>                <div className="user-box" ref={userDivL}><br/>                <i className="fa fa-envelope"><br/>                 </i><br/>                 <input type="email"<br/>                 placeholder="Email"<br/>                 autoCapitalize="off"<br/>                 onFocus={HandleFocus}<br/>                 onBlur={HandleBlur}<br/>                 ref={usernameRefL}<br/>                 /><br/>                 <i className="fa fa-info-circle ul" ref={uiconl}></i><br/>                </div><br/>                <div className="user-box" ref={passDivL}><br/>                 <i className="fa fa-lock"><br/>                 </i><br/>                 <input type="password"<br/>                 placeholder="Password"<br/>                 onFocus={HandleFocus}<br/>                 onBlur={HandleBlur}<br/>                 ref={passwordRefL}<br/>                 /><br/>                 <i className="fa fa-info-circle pl" ref={piconl}></i><br/>                </div><br/>                <div className="error-cont" ref={errmsgL}><br/>     <div className="error-msg"></div><br/>    </div><br/>                <div className="btn-box"><br/>                 <button<br/>                 onClick={HandleLogin}<br/>                 ><br/>                  Login<br/>                 </button><br/>                </div><br/>                <div className="info-box"><br/>                 <p className ="newb" >New User?</p><br/>                 <p<br/>                className="nreg"<br/>                onClick={HandleReg}<br/>                 ><br/>                 Register</p><br/>                </div><br/>                 <p className="forgotp"  onClick={Showforgot}>forgot password?</p><br/>              </div><br/>             </div><br/>             <br/>             <div className="forgot-box-cont" ref={forgotboxref}><br/>             <div className="forgot-box"><br/>                <div className="user-box" ref={forgotDiv}><br/>                <i className="fa fa-envelope"><br/>                 </i><br/>                 <input type="email"<br/>                 placeholder="Email"<br/>                 autoCapitalize="off"<br/>                 onFocus={HandleFocus}<br/>                 onBlur={HandleBlur}<br/>                 ref={forgotInp}<br/>                 /><br/>                 <i className="fa fa-info-circle ul" ref={ficonl}></i><br/>                </div><br/>                <div className="error-cont" ref={errmsgF}><br/>     <div className="error-msg"></div><br/>    </div><br/>                <div className="btn-box"><br/>                 <button<br/>                 onClick={HandleForgotSend}<br/>                 ><br/>                  Send Link<br/>                 </button><br/>                </div><br/>                <div className="info-box"><br/>                 <p<br/>                className="nreg"<br/>                onClick={BackFromForgot}<br/>                 >Login</p><br/>                </div><br/>                </div><br/>                </div><br/>             <br/>             <div className="signup-box-cont" style={{display:Rshow}}><br/>         <br/>  <div className="signup-box"><br/>    <div className="user-box" ref={userDivR}><br/>      <i className="fa fa-user"></i><br/>      <input<br/>        type="text"<br/>        placeholder="Username"<br/>        autoCapitalize="off"<br/>        onFocus={HandleFocus}<br/>        onBlur={HandleBlur}<br/>        ref={usernameRefR}<br/>      /><br/>      <i className="fa fa-info-circle ur" ref={uiconr}></i><br/>    </div><br/>    <div className="user-box" ref={emailDivR}><br/>      <i className="fa fa-envelope"></i><br/>      <input<br/>        type="email"<br/>        placeholder="Email"<br/>        onFocus={HandleFocus}<br/>        onBlur={HandleBlur}<br/>        ref={emailRefR}<br/>      /><br/>      <i className="fa fa-info-circle er" ref={eiconr}></i><br/>    </div><br/>    <div className="user-box" ref={passDivR}><br/>      <i className="fa fa-lock"></i><br/>      <input<br/>        type="password"<br/>        placeholder="Password"<br/>        onFocus={HandleFocus}<br/>        onBlur={HandleBlur}<br/>        ref={passwordRefR}<br/>      /><br/>      <i className="fa fa-info-circle pr" ref={piconr}></i><br/>    </div><br/>    <div className="user-box" ref={cpassDivR}><br/>      <i className="fa fa-lock"></i><br/>      <input<br/>        type="password"<br/>        placeholder="Confirm password"<br/>        onFocus={HandleFocus}<br/>        onBlur={HandleBlur}<br/>        ref={cpasswordRefR}<br/>      /><br/>      <i className="fa fa-info-circle cpr" ref={cpiconr}></i><br/>    </div><br/>    <div className="error-cont" ref={errmsgR}><br/>     <div className="error-msg"></div><br/>    </div><br/>    <div className="btn-box"><br/>      <button onClick={HandleSignup}>Signup</button><br/>    </div><br/>    <div className="info-box"><br/>      <p className="newb">Already have an account?</p><br/>      <p className="nreg" onClick={HandleReg}><br/>        Login<br/>      </p><br/>    </div><br/>    </div><br/></div><br/></div>  <div></div>        <div className="profile-details-cont" style={{display:DetailList}}><br/>         <div className="profile-details" ref={hideshowprofilecont}><br/>          <li className="detail" onClick={ShowPernalInfo}><br/>            <div className="icon"><br/>             <i className="fa fa-user"></i><br/>            </div><br/>            <div className="name-cont"><br/>              <div className="name"><br/>                Personal Info<br/>              </div><br/>              <div className="desc"><br/>                Manage your profile details<br/>              </div><br/>            </div><br/>            <div className="angle-cont"><br/>             <i className="fa fa-angle-right"></i><br/>            </div><br/>          </li><br/>          <li className="detail" onClick={SendFeedBack}><br/>            <div className="icon"><br/>             <i className="fa fa-comments"></i><br/>            </div><br/>            <div className="name-cont"><br/>              <div className="name"><br/>                Send Feedback<br/>              </div><br/>              <div className="desc"><br/>                Share your thoughts with us<br/>              </div><br/>            </div><br/>            <div className="angle-cont"><br/>             <i className="fa fa-angle-right"></i><br/>            </div><br/>          </li><br/>          <li className="detail signout" onClick={HandleLogout}><br/>            <div className="icon sign-out"><br/>             <i className="fa fa-sign-out"></i><br/>            </div><br/>            <div className="name-cont"><br/>              <div className="name sign-out"><br/>                Log Out<br/>              </div><br/>              <div className="desc"><br/>                Sign off and take a break<br/>              </div><br/>            </div><br/>            <div className="angle-cont"><br/>             <i className="fa fa-angle-right sign-out"></i><br/>            </div><br/>          </li><br/>         </div><br/>         <br/>          <div className="personal-details-cont" style={{display:PInfo}} ref={Pinfoedit}><br/>            <div className="personal-details"><br/>                <li className="p-info"><br/>                <div className="showchange"><br/>                Change Username<br/>                </div><br/>                <div className="p-info-in"><br/>                <div className="icon"><br/>             <i className="fa fa-user"></i><br/>            </div><br/>                <input type="text" <br/>                placeholder="Username"<br/>                onChange={HandleChangeP}<br/>                onFocus={HandleFocus}<br/>                onBlur={HandleBlur}<br/>                value={username}<br/>                 /><br/>            <div className="angle-cont"><br/>             <i className="fa fa-pen"></i><br/>            </div><br/>            </div><br/>                </li><br/>                <br/>                <li className="p-info"><br/>                <div className="showchange"><br/>                Your Email Address<br/>                </div><br/>                <div className="p-info-in"><br/>                <div className="icon"><br/>             <i className="fa fa-envelope"></i><br/>            </div><br/>                <input type="email" <br/>                className="fademail"<br/>                placeholder="Email"<br/>                onChange={HandleChangeP}<br/>                onFocus={HandleFocus}<br/>                onBlur={HandleBlur}<br/>                value={ResetEmail}<br/>                disabled<br/>                 /><br/>            <div className="angle-cont"><br/>             <i className="fa fa-lock"></i><br/>            </div><br/>            </div><br/>                </li><br/>                <br/>                <li className="p-info"><br/>                <div className="showchange"><br/>                Reset Password<br/>                </div><br/>                <div className="p-info-in"><br/>                <div className="icon"><br/>             <i className="fa fa-key"></i><br/>            </div><br/>                <button onClick={HandleResetPass}>Reset Password</button><br/>            <div className="angle-cont"><br/>             <i className="fa fa-reset"></i><br/>            </div><br/>            </div><br/>                </li><br/>                <br/>                <div className="error-cont" ref={errmsgP}><br/>     <div className="error-msg"></div><br/>    </div><br/>                <br/>                <li className="p-info save"><br/>                 <button onClick={HandleSaveP}>Save</button><br/>                </li><br/>                <br/>            </div><br/>        </div><br/>         <br/>         <div className="feedback-cont" ref={feedbackcontref}><br/>          <div className="feedback-head"><br/>             <i className="fa fa-comments-o"></i> <div className="name">Feedbacks</div><br/>             <div className="feed-count"><br/>              {feedbacksCount}<br/>             </div><br/>             <div className="close"<br/>             onClick={CloseFeedBack}<br/>             ><br/>                <i className="fa fa-backspace"></i> close<br/>             </div><br/>          </div><br/>          <br/>          <div className="load_cont" ref={loaderref}><br/>        <div className="loader"></div><br/>        <p>Loading data...</p><br/>        </div><br/>          <br/>          <div className="feedback-body" ref={bodyref}><br/>      {messages.map((db_data, i) => (<br/>        <div className={`msg-box ${db_data.user_id === currentUserUid ? 'schat' : ''}`} key={i}><br/>          <div className="user-info"><br/>            <div className="user-name">{db_data.user} {db_data.isverified && (<br/>              <i className="material-symbols-outlined">verified</i><br/>            )}:</div><br/>            <div className="user-from"><br/>              {db_data.country} <i className={db_data.flag}></i><br/>            </div><br/>            {db_data.user_id === currentUserUid && (<br/>              <i onClick={() => handleDeleteMessage(db_data.id)} className="fa fa-trash-o"></i><br/>            )}<br/>          </div><br/>          <div className="msg">{db_data.feedback}</div><br/>          <div className="time">{db_data.time}</div><br/>        </div><br/>      ))}<br/>    </div><br/>          <br/>          <div className="feedback-foot"><br/>            <input <br/>            type="text"<br/>            placeholder="Send feedback..."<br/>            onClick={HandleFocus}<br/>            onBlur={HandleBlur}<br/>            ref={feedvalue}<br/>            /><br/>            <div className="uil uil-message" onClick={HandleSendFeedBack}><br/>            </div><br/>          </div><br/>         </div><br/>        </div><br/>           </div><br/>            <Footer /><br/>          </div><br/>         </><br/>     );<br/> }<br/>   <br/>    <br/>    //App<br/>   const App = () =>{<br/>     return(<br/>      <><br/>      <FooterContextProvider><br/>        <Home /><br/>        <Movies /><br/>        <Search /><br/>        <Profile /><br/>      </FooterContextProvider><br/>      </><br/>      );<br/>    }<br/>      <br/>      //Render<br/>      const destination = document.querySelector("#app");<br/>      const root = createRoot(destination);<br/>      root.render(<br/>       <StrictMode><br/>          <App /><br/>       </StrictMode><br/>      );